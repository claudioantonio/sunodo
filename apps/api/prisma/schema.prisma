generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(uuid())
  createdAt         DateTime             @default(now())
  email             String               @unique
  subs              String[]
  name              String
  organizations     OrganizationMember[]
  account           Account              @relation(fields: [accountId], references: [id])
  accountId         String               @unique
  billingCustomerId String               @unique
}

model Organization {
  id                String               @id @default(uuid())
  createdAt         DateTime             @default(now())
  name              String               @unique
  slug              String               @unique
  invites           OrganizationInvite[]
  members           OrganizationMember[]
  account           Account              @relation(fields: [accountId], references: [id])
  accountId         String               @unique
  billingCustomerId String               @unique
}

model OrganizationMember {
  createdAt      DateTime     @default(now())
  organizationId String
  userId         String
  role           Role
  joinedAt       DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([organizationId, userId])
}

model OrganizationInvite {
  createdAt      DateTime     @default(now())
  organizationId String
  email          String
  acceptedAt     DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([organizationId, email])
}

model Application {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String   @unique
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])
  nodes     Node[]
}

model Plan {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  name          String
  label         String
  accountTypes  AccountType[]
  default       Boolean
  active        Boolean       @default(true)
  stripePriceId String
  accounts      Account[]
}

model Account {
  id                    String        @id @default(uuid())
  createdAt             DateTime      @default(now())
  type                  AccountType
  plan                  Plan          @relation(fields: [planId], references: [id])
  planId                String
  applications          Application[]
  billingSubscriptionId String?
  user                  User?
  organization          Organization?
}

model Chain {
  id          Int        @id
  createdAt   DateTime   @default(now())
  name        String     @unique
  label       String     @unique
  testnet     Boolean
  enabled     Boolean
  providerUrl String
  contracts   Contract[]
}

model Region {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  name             String   @unique
  kubeConfigSecret String
  default          Boolean  @unique
  nodes            Node[]
}

model Runtime {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String   @unique
  default   Boolean
  nodes     Node[]
}

model Contract {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  address      String
  templateHash String
  consensus    Consensus @relation(fields: [consensusId], references: [id])
  consensusId  String
  chain        Chain     @relation(fields: [chainId], references: [id])
  chainId      Int
  nodes        Node[]

  @@unique([address, chainId])
}

model Machine {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  hash      String   @unique
  url       String   @unique
  Node      Node[]
}

model Node {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  contract      Contract    @relation(fields: [contractId], references: [id])
  contractId    String
  machine       Machine     @relation(fields: [machineId], references: [id])
  machineId     String
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  region        Region      @relation(fields: [regionId], references: [id])
  regionId      String
  runtime       Runtime     @relation(fields: [runtimeId], references: [id])
  runtimeId     String
  status        NodeStatus
}

model Validator {
  id        String      @id @default(uuid())
  address   String      @unique
  keyRef    String?
  consensus Consensus[]
}

model Consensus {
  id         String        @id @default(uuid())
  type       ConsensusType
  validators Validator[]
  contracts  Contract[]
}

enum ConsensusType {
  AUTHORITY
  MULTISIG
  QUORUM
  UNPERMISSIONED
}

enum Role {
  USER
  ADMIN
}

enum NodeStatus {
  STARTING
  READY
  FAILED
}

enum AccountType {
  USER
  ORGANIZATION
}
