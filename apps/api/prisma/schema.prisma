generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator erd {
  provider = "prisma-erd-generator"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(uuid())
  createdAt         DateTime             @default(now())
  email             String               @unique
  subs              String[]
  name              String
  organizations     OrganizationMember[]
  account           Account              @relation(fields: [accountId], references: [id])
  accountId         String               @unique
  billingCustomerId String               @unique
}

model Organization {
  id                String               @id @default(uuid())
  createdAt         DateTime             @default(now())
  name              String               @unique
  slug              String               @unique
  invites           OrganizationInvite[]
  members           OrganizationMember[]
  account           Account              @relation(fields: [accountId], references: [id])
  accountId         String               @unique
  billingCustomerId String               @unique
}

model OrganizationMember {
  createdAt      DateTime     @default(now())
  organizationId String
  userId         String
  role           Role
  joinedAt       DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([organizationId, userId])
}

model OrganizationInvite {
  createdAt      DateTime     @default(now())
  organizationId String
  email          String
  acceptedAt     DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([organizationId, email])
}

model Application {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  name        String       @unique
  accountId   String
  account     Account      @relation(fields: [accountId], references: [id])
  deployments Deployment[]
}

model Plan {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  name          String
  label         String
  accountTypes  AccountType[]
  default       Boolean
  active        Boolean       @default(true)
  stripePriceId String
  accounts      Account[]
}

model Account {
  id                    String        @id @default(uuid())
  createdAt             DateTime      @default(now())
  type                  AccountType
  plan                  Plan          @relation(fields: [planId], references: [id])
  planId                String
  applications          Application[]
  billingSubscriptionId String?       @unique
  user                  User?
  organization          Organization?
}

model Chain {
  id          Int          @id
  createdAt   DateTime     @default(now())
  name        String       @unique
  label       String       @unique
  testnet     Boolean
  enabled     Boolean
  deployments Deployment[]
}

model Region {
  id               String       @id @default(uuid())
  createdAt        DateTime     @default(now())
  name             String       @unique
  kubeConfigSecret String
  deployments      Deployment[]
  default          Boolean      @unique
}

model Runtime {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  name       String       @unique
  default    Boolean
  Deployment Deployment[]
}

model Deployment {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  application     Application      @relation(fields: [applicationId], references: [id])
  applicationId   String
  contractAddress String
  machineSnapshot String
  status          DeploymentStatus
  chain           Chain            @relation(fields: [chainId], references: [id])
  chainId         Int
  region          Region           @relation(fields: [regionId], references: [id])
  regionId        String
  runtime         Runtime          @relation(fields: [runtimeId], references: [id])
  runtimeId       String

  @@unique([applicationId, chainId])
}

enum Role {
  USER
  ADMIN
}

enum DeploymentStatus {
  STARTING
  READY
  FAILED
}

enum AccountType {
  USER
  ORGANIZATION
}
